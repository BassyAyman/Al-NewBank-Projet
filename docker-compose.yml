version: '3.8'

services:

  # Terminal Transaction Service load balancer
  nginx-lb-terminal:
    container_name: nginx-lb-terminal
    image: nginx:latest
    depends_on:
      - terminal-transaction-service
    ports:
      - "81:80" # port 81 for terminal transactions and port 80 for web transactions
    volumes:
      - ./TerminalTransactionVerificationService/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - igorbank-net

  # Terminal Transaction Service (Spring)
  terminal-transaction-service:
    container_name: terminal-transaction-service
    image: "terminal-transaction-service"
    build:
      context: ./TerminalTransactionVerificationService
    depends_on:
      postgres-slave-canada:
        condition: service_healthy
    networks:
      - igorbank-net

  # Web Transaction Service load balancer
  nginx-lb-web:
    container_name: nginx-lb-web
    image: nginx:latest
    depends_on:
      - web-transaction-service
    ports:
      - "80:80" # port 81 for terminal transactions and port 80 for web transactions
    volumes:
      - ./WebTransactionService/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - igorbank-net

  # Web Transaction Service (Spring)
  web-transaction-service:
    image: "web-transaction-service"
    build:
      context: ./WebTransactionService
    depends_on:
      postgres-slave:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - igorbank-net

  # cache redis
  redis:
    container_name: redis
    image: "redis:latest"
    hostname: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - igorbank-net
    volumes:
      - cache:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 3

  # Kafka setup
  zookeeper:
    image: zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - igorbank-net

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    restart: always
    networks:
      - igorbank-net

  # PostGresDB Located in Greenland
  postgres-master:
    container_name: postgres-master
    image: docker.io/bitnami/postgresql:11-debian-10
    environment:
      - POSTGRESQL_PGAUDIT_LOG=READ,WRITE
      - POSTGRESQL_LOG_HOSTNAME=true
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_DATABASE=clientinfo_db
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "5432:5432"
    volumes:
#     - postgresql_master_data:/bitnami/postgresql # for the moment we don't need to persist data in the volume
      - ./sql:/docker-entrypoint-initdb.d # directory sql contains all scripts to be exectued on startup
    networks:
      - igorbank-net

  # PostGresDB slave read only located locally
  postgres-slave:
    container_name: postgres-slave
    image: docker.io/bitnami/postgresql:11-debian-10
    ports:
      - "5433:5432"
    environment:
      - POSTGRESQL_USERNAME=postgres
      - ALLOW_EMPTY_PASSWORD=yes
      - POSTGRESQL_MASTER_HOST=postgres-master
      - POSTGRESQL_PGAUDIT_LOG=READ,WRITE
      - POSTGRESQL_LOG_HOSTNAME=true
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - POSTGRESQL_STATEMENT_TIMEOUT=25000
      - POSTGRESQL_LOG_CONNECTIONS=true
      - POSTGRESQL_LOG_DISCONNECTIONS=true
      - POSTGRESQL_PGAUDIT_LOG=ALL
    depends_on:
      - postgres-master
    networks:
      - igorbank-net
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 3s
      timeout: 30s
      retries: 10

  # PostGresDB slave read only located locally
  postgres-slave-canada:
    container_name: postgres-slave-canada
    image: docker.io/bitnami/postgresql:11-debian-10
    ports:
      - "5434:5432"
    environment:
      - POSTGRESQL_USERNAME=postgres
      - ALLOW_EMPTY_PASSWORD=yes
      - POSTGRESQL_MASTER_HOST=postgres-master
      - POSTGRESQL_PGAUDIT_LOG=READ,WRITE
      - POSTGRESQL_LOG_HOSTNAME=true
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - POSTGRESQL_STATEMENT_TIMEOUT=25000
      - POSTGRESQL_LOG_CONNECTIONS=true
      - POSTGRESQL_LOG_DISCONNECTIONS=true
      - POSTGRESQL_PGAUDIT_LOG=ALL
    depends_on:
      - postgres-master
    networks:
      - igorbank-net
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 3s
      timeout: 30s
      retries: 10


  update-service:
    container_name: update-service
    build:
      context: ./update-service
    ports:
      - "8082:8080"
    depends_on:
      - kafka
      - postgres-master
    restart: always
    networks:
      - igorbank-net

networks:
  igorbank-net:
    driver: bridge

volumes:
  postgresql_master_data: